로 타입은 사용하지 말자
===================
클래스와 인터페이스에 `<>`를 이용하여 타입 매개변수를 사용하는 것을 `제네릭`, `제네릭 인터페이스`라 한다.       
`ArrayList<E>`, `List<E>` 같은 것들이 대표적이며 이들을 통틀어 **제네릭 타입**이라 부른다.      
  
각각의 제네릭 타입은 **매개변수화 타입** 을 정의한다.      
예컨대 `List<String>`은 원소의 타입이 String인 리스트를 뜻하는 매개변수화 타입이다.        
여기서 String이 매개변수 타입 E 에 해당하는 실제 타입 매개변수다.      
 
**제네릭 타입을 하나 정의하면 그에 딸린 `로 타입`도 함께 정의된다.**         
로 타입이란 제네릭 타입에서 타입 매개변수를 전혀 사용하지 않을때를 말한다.(Object)        
즉, List<E> 대신 List를 사용하는 것인데 둘은 엄연히 다르다.    
제네릭이 도래하기 이전 버전의 클래스들과의 호환을 위해 정의되었으므로 그 용도에만 사용하는 것이 좋다.    

```java
// private final Collection<Stamp> stamps = ...;
private final Collection stamps = ...;
stamps.add(new Coin(...));

for(Iterator i = stamps.iterator(); i.hasNext(); ) {
    Stamp stamp = (Stamp) i.next(); // 에러 발생 
    stamp.cancel();
}
```
주석으로 처리한 `Collection<Stamp>`과 달리,     
`Collection`는 다양한 타입의 객체를 받을 수 있다.(엄밀히 말하면 모든 객체)    
그리고 이 값을 꺼낼 때 즉, 런타임 시점에서야 타입 에러를 확인할 수 있다.   
사실 이러한 타입 에러를 컴파일 단에서 체크를 하는게 제네릭의 순 기능 중 하나다.      

정리하자면 **로 타입을 제네릭이 안겨주는 안정성과 표현력을 모두 잃게 된다.**    














